The wolfSSL examples in the WICED SDK requires a server application. wolfSSL
provides an easy solution in the <wolfSSL root>/examples/ directory. Run the autogen
script and configure the library with necessary functionality, see ./configure -h for a
list of configure options. Finally, run make and make check to ensure the
library built successfully. You can install wolfSSL on your system with make
install if you wish.

Run ./examples/server/server -h for a list of server options. If you would like
to test the server, you may run the client against it using your localhost. An
example of how to run the server:
        ./examples/server/server -b -d -r -p 50007 <IP>

Contained within this directory are components that you will need, make sure to
verify that you have access to:
    1. user_settings_folder
    2. wolfssl_lib.mk

The other directories and files contained within this directory are packaged with
the wolfSSL WICED repository. The directories and files are:
    1. wolfCrypt - a snip that may be used with an existing project or if you
        require the ability to add the files to a different version. This snip
        runs the wolfCrypt test suite.
    2. wolfSSL_tls_client - a client snip that runs a TLS client over the WICED
        TCP application.
    3. WICED.mk and BESL.mk - internal makefiles for the WICED SDK to include and
        compile the wolfSSL library.
    4. Create a user_settings.h dummy file in <wolfssl_root>. 

WICED SDK 6.1 with wolfSSL is available in the wolfSSL repository on github.
You will need to clone both the wolfSSL library and the WICED SDK project from
www.github.com/wolfssl. You will need to download and install the WICED
software from the Cypress website. Once you have installed the WICED SDK software:
    1. Replace the necessary directory, 43xxx_Wi-Fi in the WICED framework with
       the cloned wolfSSL WICED project.
    2. Create a directory called 'wolfssl_lib.' The path should be:
       43xxx_Wi-Fi/WICED/security/BESL/wolfssl_lib.
    3. Drop in or link the wolfSSL library into the wolfssl_lib directory you
       just created.
    4. The user_settings_folder directory should be placed in wolfSSL's
       <wolfSSL_root>/wolfssl/. It should be placed at the same level as the openssl
       directory. This file provides the configure options for compiling
       wolfSSL with your project.
    5. The wolfssl_lib.mk should be placed at the same level as the wolfSSL
        library within wolfssl_lib. The directory structure should be
            WICED/security/BESL/wolfssl_lib/<wolfssl_root>      and
            WICED/security/BESL/wolfssl_lib/wolfssl_lib.mk.

You can now build and use the wolfSSL and wolfCrypt snips within the WICED SDK.
Cypress includes great documentation and getting started videos to learn how to
build and run the snips as a starting off point for your project.

wolfSSL provides a wolfCrypt and TLS Client application in the WICED snips. We
will be adding additional functionality incramentally.


wolfSSL acknowledges that TLS v1.3 and DTLS are not functional in the TLS client
application. The development of these features will be done incrementally. A TLS
server application and wolfQTT technology will also be added to WICED in the future.

 
